LLia Quick start guide.

Llia is an OSC client for SuperCollider with comprehensive MIDI
implementation.  LLia allows you to remotely create and control
SuperCollider resources such as Synths, Effects, Buses and Buffers.

The LLia application is divided into two components:

    A) A server application which runs on SuperCollider.  This component
       is often called the "Host".

    B) A client application which may be running on a separate computer.


Most user interaction is with the client software.  The program on the host
should be running before the client starts.


		 ****************************************
		   Starting The Server Side Application
		 ****************************************

1) Start SuperCollider ide.
   From a terminal type 'scide'

2) Boot the SC server

   s = Server.local.boot;

3) Start the Llia server application.

   (
       a.free;
       a = LliaHandler.new()
   )

		 ****************************************
			  The Client Application
		 ****************************************

The most important initial task is select OSC parameters and MIDI ports.
There are a few different ways of doing this but the most convenient is
through the initial "splash screen".  It is possible that Llia is
configured to not display the splash screen.   If the splash screen does
not appear (it has a large Lizard logo) either:

    1) Edit the configuration file value no-splash to read
      'no-splash : False' 

    2) Start Llia with the --nosplash command line option.
       

The splash screen is roughly divided into two active regions.  Immediately
below the logo are fields for various OSC parameters.  These values must
exactly match their counter parts in host application.  In most cases the
default values should work.

The lower section contains a list of available MIDI ports.  Select a
desired port and click "Continue".

     NOTES:

     1) MIDI output is included for future expansion, currently
       (2016.07.16) MIDI output is not used.

     2) Once the Continue button is clicked the OSC and MIDI IO values can
        not be changed.


The splash screen is replaced by the main application window which is
dominated by several large icons for the available synths/effects.

		 ****************************************
			     Creating A Synth
		 ****************************************

Clicking one of the "Synths" buttons causes an "Add Synth" dialog to
appear.  For the moment accept the defaults and click "OK".  The dialog
will be replaced with a synth "editor" window.  If all goes well the new
synth should be live.  It may be necessary to first select one of the
programs on the right before audio output is produced.


The editor window is divided into a program bank on the left and a
'notepad' widget with several tab on the right.  Depending on the GUI style
in use it may not be obvious that there is a 'handle' between the bank and
the notepad.  You may use this handle to change the relative screen real
estate dedicated to the program bank.

The exact compliment of editor tabs is dependent on the type of Synth.  The
first 5 tabs are common to all synths, any remaining tabs are specific to
the synth type.

TABS:
 1) "Program" (Read Only)
     The program tab displays the Python code which defines the current
     program.

 2) "Buses & Buffers" (Read Only)
     The buses and buffer tab displays which buses or buffers are assigned
     to the synth, and what synth parameter they are assigned to.

     NOTES:  Currently (2016.07.16) bus and buffer assignments can not be
             changed once a synth has been created.  A hoped for future
             feature is to allow changing these values.

             Control buses and buffers are included for future expansion,
             currently they are not being used.

  3) "Performance"
      The Performance tab allows selection of general synth parameters:

      A) MIDI input channel 
      B) Key table selection for alternate tuning
      C) Transposition in steps
      D) Key range, low and high key numbers
      E) Pitch bend range in cents (100 = 1/2 step)

      Transpose, Key range and Pitch bend are saved as part of a program.
      MIDI channel and key table are not saved.

   4) "Map1"
       The Map1 tab is where MIDI continuous controllers and Pitch Wheel
       events are mapped to synth parameters.  Map1 values are saved as
       part of a program.

   5) "Map2"
       The Map2 tab is similar to Map1 and sets mapping between MIDI
       velocity, after touch, and key number to synth parameters.  Map2
       values are saved as part of a program.


		 ****************************************
			       Using Effects
		 ****************************************

There is very little difference between an "Effect" and a "Synth".  Effects
will have input buses while synths typically do not.  Effects  use a
specialized key board mode but otherwise there is not much difference.

Before a synth may be processed by an effect you must first create one or
more audio buses. You do that by the Buses menu.  Several buses with
names "out_0", "out_1, ..., "in_0", "in_1", ...  are automatically created
by Llia.  These correspond to the first n hardware channels.  "out_0"
is the default output bus and corresponds to the first output of the first
sound-card.   

To patch synth "Foo" to effect "Bar"   [Foo]--->[Bar]--> out_0

1) Create an audio bus.
2) Create synth Foo.  In the synth creation dialog set the output bus to
   match the bus created in step 1. 
3) Create the effect Bar.  In the synth creation dialog set the input bus
   to match the output bus of Foo.

At the moment it is not possible to change how synths are patched once they
are created. 


		 ****************************************
			     Multiple Effects
		 ****************************************

You can easily process a synth to parallel effects

             +--->[Bar]---> out_0
     [Foo] --+
             +--->[Baz]---> out_0

simply by setting all effects inputs to the same synth output bus.


Since an effect is nothing more then a specilized synth, you may chain them
together to process one effect through another.  Creating a serial effects
chain is a bit more complicated.  THE ORDER IN WHICH THE EFFECTS ARE
CREATED IS IMPORTANT.  THE EFFECTS MUST BE CREATED IN REVERSE ORDER. 



As the simplist example process the Synth Foo
thorugh effect Bar and then through effect Baz.

    [Foo]---->[Bar]---->[Baz]---->
 bus      A          B        out_0

1) Create buses A and B
2) Create synth Foo.
3) Create the LAST effect in the chain first
4) Create the 2nd to last effect next.

Repeat until the first effect is created. 
